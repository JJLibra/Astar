// 定义两个开放列表和两个关闭列表
QList<Astarnode> openlist1, openlist2, closelist1, closelist2;
// 定义一个函数，用于检查两个搜索空间是否相交
Astarnode checkIntersection(){
    for(int i=0; i<openlist1.size(); i++){
        for(int j=0; j<openlist2.size(); j++){
            if(openlist1[i].x == openlist2[j].x && openlist1[i].y == openlist2[j].y){
                return openlist1[i]; // 返回相交的节点
            }
        }
    }
    for(int i=0; i<closelist1.size(); i++){
        for(int j=0; j<closelist2.size(); j++){
            if(closelist1[i].x == closelist2[j].x && closelist1[i].y == closelist2[j].y){
                return closelist1[i]; // 返回相交的节点
            }
        }
    }
    return Astarnode(); // 返回空节点
}
// 定义一个函数，用于从两个开放列表中选择f值最小的节点
Astarnode selectNode(bool &direction){
    if(openlist1.isEmpty() && openlist2.isEmpty()){
        return Astarnode(); // 返回空节点
    }
    else if(openlist1.isEmpty()){
        direction = false; // 设置搜索方向为从终点开始
        return getopenlist(openlist2); // 返回终点方向的开放列表中的第一个节点
    }
    else if(openlist2.isEmpty()){
        direction = true; // 设置搜索方向为从起点开始
        return getopenlist(openlist1); // 返回起点方向的开放列表中的第一个节点
    }
    else{
        // 比较两个开放列表中的第一个节点的f值
        if(openlist1[0].cost < openlist2[0].cost){
            direction = true; // 设置搜索方向为从起点开始
            return getopenlist(openlist1); // 返回起点方向的开放列表中的第一个节点
        }
        else if(openlist1[0].cost > openlist2[0].cost){
            direction = false; // 设置搜索方向为从终点开始
            return getopenlist(openlist2); // 返回终点方向的开放列表中的第一个节点
        }
        else{
            // 如果两个开放列表中的第一个节点的f值相等，随机选择一个方向
            direction = rand() % 2;
            if(direction){
                return getopenlist(openlist1); // 返回起点方向的开放列表中的第一个节点
            }
            else{
                return getopenlist(openlist2); // 返回终点方向的开放列表中的第一个节点
            }
        }
    }
}
// 定义一个函数，用于生成当前节点的后继节点
void generateSuccessors(Astarnode current, bool direction){
    int optrx, optry;
    QList<Astarnode> &openlist = direction ? openlist1 : openlist2; // 根据搜索方向选择开放列表
    QList<Astarnode> &closelist = direction ? closelist1 : closelist2; // 根据搜索方向选择关闭列表
    QList<Astarnode> &openlist2 = direction ? openlist2 : openlist1; // 根据搜索方向选择相反方向的开放列表
    QList<Astarnode> &closelist2 = direction ? closelist2 : closelist1; // 根据搜索方向选择相反方向的关闭列表
    if(dir!=2){
        for(int i=1; i<=4; i++){
            optrx=current.x+(i>=3?1:-1);
            optry=current.y+pow(-1,i);
            if(optrx<=0 or optrx>h or optry<=0 or optry>w) continue;
            if(anode[current.x][optry].isClosed and anode[optrx][current.y].isClosed) continue;
            if(anode[optrx][optry].isClosed) continue;
            // 检查后继节点是否在相反方向的开放列表或关闭列表中
            for(int j=0; j<openlist2.size(); j++){
                if(openlist2[j].x == optrx && openlist2[j].y == optry){
                    // 找到了一条路径，可以停止搜索
                    anode[optrx][optry].lastpoint.setX(current.x);
                    anode[optrx][optry].lastpoint.setY(current.y);
                    anode[optrx][optry].isInOpenList = true;
                    return;
                }
            }
            for(int j=0; j<closelist2.size(); j++){
                if(closelist2[j].x == optrx && closelist2[j].y == optry){
                    // 找到了一条路径，可以停止搜索
                    anode[optrx][optry].lastpoint.setX(current.x);
                    anode[optrx][optry].lastpoint.setY(current.y);
                    anode[optrx][optry].isInOpenList = true;
                    return;
                }
            }
            // 如果后继节点不在相反方向的开放列表或关闭列表中，更新它的g，h和f值，并加入到当前方向的开放列表中
            if(anode[optrx][optry].g==0){
                anode[optrx][optry].g=current.g+14;
                anode[optrx][optry].cost+=(current.g+14);
                anode[optrx][optry].lastpoint.setX(current.x);
                anode[optrx][optry].lastpoint.setY(current.y);
                putopenlist(openlist,anode[optrx][optry]);
                anode[optrx][optry].isInOpenList=true;
            }
            else if(anode[optrx][optry].g>current.g+14 and anode[optrx][optry].isInOpenList){
                anode[optrx][optry].g=current.g+14;
                anode[optrx][optry].cost=anode[optrx][optry].g+anode[optrx][optry].h;
                anode[optrx][optry].lastpoint.setX(current.x);
                anode[optrx][optry].lastpoint.setY(current.y);
                //openlist重新排序
                resortopenlist(openlist,anode[optrx][optry]);
            }
        }
    }

    for(int i=1; i<=4; i++){

        optrx=current.x+((i+1)%2)*(i-3);
        optry=current.y+(i%2)*(i-2);
        if(optrx<=0 or optrx>h or optry<=0 or optry>w) continue;
        if(anode[optrx][optry].isClosed) continue;
        // 检查后继节点是否在相反方向的开放列表或关闭列表中
        for(int j=0; j<openlist2.size(); j++){
            if(openlist2[j].x == optrx && openlist2[j].y == optry){
                // 找到了一条路径，可以停止搜索
                anode[optrx][optry].lastpoint.setX(current.x);
                anode[optrx][optry].lastpoint.setY(current.y);
                anode[optrx][optry].isInOpenList = true;
                return;
            }
        }
        for(int j=0; j<closelist2.size(); j++){
            if(closelist2[j].x == optrx && closelist2[j].y == optry){
                // 找到了一条路径，可以停止搜索
                anode[optrx][optry].lastpoint.setX(current.x);
                anode[optrx][optry].lastpoint.setY(current.y);
                anode[optrx][optry].isInOpenList = true;
                return;
            }
        }
        // 如果后继节点不在相反方向的开放列表或关闭列表中，更新它的g，h和f值，并加入到当前方向的开放列表中
        if(anode[optrx][optry].g==0){
            anode[optrx][optry].g=current.g+10;
            anode[optrx][optry].cost=anode[optrx][optry].g+anode[optrx][optry].h;
            anode[optrx][optry].lastpoint.setX(current.x);
            anode[optrx][optry].lastpoint.setY(current.y);
            putopenlist(openlist,anode[optrx









Astarnode current;
    //int currentcost=0;
    int optrx;
    int optry;
    current=anode[startx][starty];
    while(1){
        for(int i=1; i<=4; i++){
            optrx=current.x+((i+1)%2)*(i-3);
            optry=current.y+(i%2)*(i-2);
            if(optrx<=0 or optrx>h or optry<=0 or optry>w) continue;
            if(anode[optrx][optry].isClosed) continue;
            if(anode[optrx][optry].g==0){
                anode[optrx][optry].g=current.g+10;
                anode[optrx][optry].cost=anode[optrx][optry].g+anode[optrx][optry].h;
                anode[optrx][optry].lastpoint.setX(current.x);
                anode[optrx][optry].lastpoint.setY(current.y);
                putopenlist(openlist,anode[optrx][optry]);
                anode[optrx][optry].isInOpenList=true;
            }
            else if(anode[optrx][optry].g>current.g+10 and anode[optrx][optry].isInOpenList){
                anode[optrx][optry].g=current.g+10;
                anode[optrx][optry].cost=anode[optrx][optry].g+anode[optrx][optry].h;
                anode[optrx][optry].lastpoint.setX(current.x);
                anode[optrx][optry].lastpoint.setY(current.y);
                resortopenlist(openlist,anode[optrx][optry]);
            }
        }

        if(openlist.isEmpty()){
            notfound();
            qDebug()<<"not found";
            return;
        }
        if(anode[endx][endy].isInOpenList) break;
        current=getopenlist(openlist);
    }










//双向A*算法
void doubleAstar(){
    //初始化起点和终点
    current=anode[startx][starty];  //从起点开始
    Astarnode currentDA; //从终点开始
    currentDA=anode[endx][endy];
    qDebug("check doubleAstar");
    while(1){
        //从起点开始扩展
        expand(current, openlist); //扩展当前节点的相邻节点，并将它们放入开放列表
        if(openlist.isEmpty()){ //如果开放列表为空，说明没有可行通路
            notfound();
            return;
        }
        if(anode[endx][endy].isInOpenList) break;   //终点已被访问，说明已找到最短路径
        current=getopenlist(openlist);  //否则继续寻找，从开放列表首节点开始，开放列表是升序的

        //从终点开始扩展
        expand(currentDA, openlistDA); //扩展当前节点的相邻节点，并将它们放入开放列表
        if(openlistDA.isEmpty()){ //如果开放列表为空，说明没有可行通路
            notfound();
            return;
        }
        if(anode[startx][starty].isInOpenListDA) break;   //起点已被访问，说明已找到最短路径
        currentDA=getopenlist(openlistDA);  //否则继续寻找，从开放列表首节点开始，开放列表是升序的

        //检查两个开放列表是否有交集
        if(intersect(openlist, openlistDA)){ //如果有交集，说明两个方向的搜索已经相遇
            //找到交集中花费最小的节点
            Astarnode minNode = findMinNode(openlist, openlistDA);
            //回溯该节点的前驱，得到从起点到该节点的路径
            backtrack(minNode, path);
            //回溯该节点的后继，得到从该节点到终点的路径
            backtrackDA(minNode, path);
            //输出最短路径
            output(path);
            return;
        }
    }
    //前面已确保开放列表不为空，因此至此问题必定解决
    issolved=true;
    shutevent=true;
    updateandpaint();
}

//扩展当前节点的相邻节点，并将它们放入开放列表
void expand(Astarnode& current, QList<Astarnode>& openlist){
    for(int i=1; i<=4; i++){ //四方向，i=1，2，3，4分别代表上右下左
        //optrx，optry表示相邻节点坐标
        optrx=current.x+((i+1)%2)*(i-3);    //如果i是奇数，在x方向移动，y方向上不变
        optry=current.y+(i%2)*(i-2);        //如果i是偶数，在y方向移动，x方向上不变
        if(optrx<=0 or optrx>h or optry<=0 or optry>w) continue;    //判断是否到达边界
        if(anode[optrx][optry].isClosed) continue;  //如果相邻节点已在关闭列表中，跳过，关闭列表存放就是访问过的节点
        if(anode[optrx][optry].g==0){
            anode[optrx][optry].g=current.g+10; //一条边的距离设为10
            anode[optrx][optry].cost=anode[optrx][optry].g+anode[optrx][optry].h;   //f=g+h
            anode[optrx][optry].lastpoint.setX(current.x);  //并设置该相邻节点的前驱，因为之后输出最短路径通过回溯输出
            anode[optrx][optry].lastpoint.setY(current.y);
            putopenlist(openlist,anode[optrx][optry]);  //将该相邻节点放入开放列表，开放列表存放未访问过的节点
            anode[optrx][optry].isInOpenList=true;
            status[optrx][optry]=5;
        }
        //如果当前节点的花费比相邻节点少，可以继续在当前节点的相邻节点查找
        if(anode[optrx][optry].g!=0 and anode[optrx][optry].g>current.g+10 and anode[optrx][optry].isInOpenList){
            anode[optrx][optry].g=current.g+10;
            anode[optrx][optry].cost=anode[optrx][optry].g+anode[optrx][optry].h;
            anode[optrx][optry].lastpoint.setX(current.x);
            anode[optrx][optry].lastpoint.setY(current.y);
            resortopenlist(openlist,anode[optrx][optry]);   //将该相邻节点放入开放列表并重排序开放列表
        }
    }
}

//检查两个开放列表是否有交集
bool intersect(QList<Astarnode>& openlist, QList<Astarnode>& openlistDA){
    for(int i=0; i<openlist.size(); i++){ //遍历第一个开放列表
        Astarnode node = openlist[i]; //取出一个节点
        for(int j=0; j<openlistDA.size(); j++){ //遍历第二个开放列表
            Astarnode nodeDA = openlistDA[j]; //取出一个节点
            if(node.x == nodeDA.x && node.y == nodeDA.y){ //如果两个节点的坐标相同，说明有交集
                return true;
            }
        }
    }
    return false; //否则没有交集
}

//找到交集中花费最小的节点
Astarnode findMinNode(QList<Astarnode>& openlist, QList<Astarnode>& openlistDA){
    Astarnode minNode; //存放最小节点
    int minCost = INT_MAX; //存放最小花费
    for(int i=0; i<openlist.size(); i++){ //遍历第一个开放列表
        Astarnode node = openlist[i]; //取出一个节点
        for(int j=0; j<openlistDA.size(); j++){ //遍历第二个开放列表
            Astarnode nodeDA = openlistDA[j]; //取出一个节点
            if(node.x == nodeDA.x && node.y == nodeDA.y){ //如果两个节点的坐标相同，说明有交集
                int cost = node.g + nodeDA.g; //计算两个节点的总花费
                if(cost < minCost){ //如果总花费小于当前最小花费，更新最小节点和最小花费
                    minNode = node;
                    minCost = cost;
                }
            }
        }
    }
    return minNode; //返回最小节点
}

//回溯当前节点的前驱，得到从起点到当前节点的路径
void backtrack(Astarnode& current, QList<Astarnode>& path){
    while(1){
        path.push_back(current); //将当前节点加入路径
        if(current.x==startx and current.y==starty) break; //如果当前节点是起点，结束回溯
        current=anode[current.lastpoint.x()][current.lastpoint.y()]; //否则继续回溯前驱节点
    }
}

//回溯当前节点的后继，得到从当前节点到终点的路径
void backtrackDA(Astarnode& current, QList<Astarnode>& path){
    while(1){
        if(current.x==endx and current.y==endy) break; //如果当前节点是终点，结束回溯
        current=anode[current.lastpoint.x()][current.lastpoint.y()]; //否则继续回溯后继节点
        path.push_back(current); //将当前节点加入路径
    }
}

//输出最短路径
void output(QList<Astarnode>& path){
    qDebug("The shortest path is:");
    for(int i=0; i<path.size(); i++){ //遍历路径
        Astarnode node = path[i]; //取出一个节点
        qDebug("(%d, %d)", node.x, node.y); //输出节点的



(4, 7)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
(2, 5)
(2, 6)
(2, 7)
(5, 1)
(5, 2)
(5, 3)
(5, 4)
(5, 5)
(5, 6)


(3, 2)
(5, 8)
(5, 7)
(5, 6)
(5, 5)
(5, 4)
(5, 3)
(4, 9)
(5, 2)
(2, 8)
(2, 7)
(2, 6)
(2, 5)
(2, 4)
(2, 3)
(3, 9)

